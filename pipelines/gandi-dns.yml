trigger:
  - master

resources:
- repo: self
variables:
  tag: '$(Build.BuildId)'

stages:

- stage:  Build
  displayName: Build new img
  pool:
    name: Default
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'my_dockerHub'
        repository: 'gandi'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        arguments: '-t bogdanioanliviu/gandi:$(Build.BuildId)'
    - task: Bash@3
      displayName: Scan img trivy
      inputs:
        targetType: 'inline'
        script: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /home/bil/.docker:/root/.docker \
          -v $PWD:/src --workdir /src aquasec/trivy:latest \
          image --ignore-unfixed --exit-code 0 --severity HIGH,CRITICAL --format sarif -o /src/report.sarif \
          --scanners vuln,config,secret bogdanioanliviu/gandi:$(Build.BuildId)
    - task: PublishBuildArtifacts@1
      displayName: "Publish scan results"
      inputs:
        pathToPublish: $(System.DefaultWorkingDirectory)/report.sarif
        artifactName: CodeAnalysisLogs
      condition: 'always()'
    - task: Docker@2
      inputs:
        containerRegistry: 'my_dockerHub'
        repository: 'bogdanioanliviu/gandi'
        command: 'push'
        tags: '$(Build.BuildId)'

- stage: CleanUp
  displayName: Clean up
  dependsOn: Build
  pool:
    name: Default
  jobs:
    - job: CleanUp_img
      steps:
        - task: Bash@3
          displayName: Delete docker img
          inputs:
            targetType: 'inline'
            script: 'docker rmi bogdanioanliviu/gandi:$(Build.BuildId) aquasec/trivy:latest gandi:$(Build.BuildId)'
            failOnStderr: true